package algorithms.maze3D;

public class Maze3D {
    private int depth;
    private int row;
    private int column;
    private int[][][] Walls;
    private Position3D start;
    private Position3D end;

    public void setWalls(int[][][] walls) {
        Walls = walls;
    }

    public int[][][] getWalls() {
        return Walls;
    }

    public void setStart(Position3D start) {
        this.Start = start;
    }

    public void setEnd(Position3D end) {
        this.End = end;
    }

    public Position3D getStartPosition() {
        return Start;
    }

    public Position3D getGoalPosition() {
        return End;
    }

    private Position3D Start;
    private Position3D End;

    public void setRow(int rows) {
        this.row = rows;
    }

    public void setColumn(int columns) {
        this.column = columns;
    }

    public void setDepth(int depth) {
        this.depth = depth;
    }

    public int getRows() {
        return row;
    }

    public int getColumns() {
        return column;
    }

    public int getDepth() {
        return depth;
    }

    public void setCell(int depth, int row, int column, int val) {
        if (row >= 0 & column >= 0 & depth >= 0 & row < this.row & column < this.column & depth < this.depth & (val == 0 | val == 1)) {
            Walls[depth][row][column] = val;
        }
    }

    public void print() {
        System.out.println("{");
        for (int depth = 0; depth < getDepth(); depth++) {
            for (int row = 0; row < getRows(); row++) {
                System.out.print("{ ");
                for (int col = 0; col < getColumns(); col++) {
                    if (depth == getStartPosition().getDepthIndex() && row == getStartPosition().getRowIndex() && col == getStartPosition().getColumnIndex()) // if the position is the start - mark with S
                        System.out.print("S ");
                    else {
                        if (depth == getGoalPosition().getDepthIndex() && row == getGoalPosition().getRowIndex() && col == getGoalPosition().getColumnIndex()) // if the position is the goal - mark with E
                            System.out.print("E ");
                        else
                            System.out.print(getWalls()[depth][row][col] + " ");
                    }
                }
                System.out.println("}");
            }
            if (depth < getDepth() - 1) {
                System.out.print("---");
                for (int i = 0; i < getColumns(); i++)
                    System.out.print("--");
                System.out.println();
            }
        }
        System.out.println("}");
    }
}
